package com.example.etl;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.Bean;
import org.springframework.web.client.RestTemplate;

@SpringBootApplication
public class EtlApplication {
    public static void main(String[] args) {
        SpringApplication.run(EtlApplication.class, args);
    }

    @Bean
    public RestTemplate restTemplate() {
        return new RestTemplate();
    }
}

// FileProcessorService.java
package com.example.etl.service;

import org.springframework.stereotype.Service;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.List;
import java.util.ArrayList;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.stream.Stream;

@Service
public class FileProcessorService {
    private final ExecutorService executorService = Executors.newFixedThreadPool(10);
    private final TransformationService transformationService;
    private final LoadService loadService;

    public FileProcessorService(TransformationService transformationService, LoadService loadService) {
        this.transformationService = transformationService;
        this.loadService = loadService;
    }

    public void processFile(String filePath) {
        try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {
            Stream<String> lines = reader.lines();
            List<String> batch = new ArrayList<>();
            lines.forEach(line -> {
                String transformed = transformationService.transform(line);
                batch.add(transformed);
                if (batch.size() >= 1000) { // Batch size 1000
                    List<String> batchCopy = new ArrayList<>(batch);
                    executorService.submit(() -> loadService.saveToDatabase(batchCopy));
                    batch.clear();
                }
            });
            if (!batch.isEmpty()) {
                executorService.submit(() -> loadService.saveToDatabase(batch));
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}

// TransformationService.java
package com.example.etl.service;

import org.springframework.stereotype.Service;

@Service
public class TransformationService {
    public String transform(String input) {
        return input.toUpperCase(); // Example transformation
    }
}

// LoadService.java
package com.example.etl.service;

import com.example.etl.repository.DataRepository;
import org.springframework.stereotype.Service;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

@Service
public class LoadService {
    private final ExecutorService executorService = Executors.newFixedThreadPool(5);
    private final DataRepository dataRepository;

    public LoadService(DataRepository dataRepository) {
        this.dataRepository = dataRepository;
    }

    public void saveToDatabase(List<String> transformedData) {
        executorService.submit(() -> {
            dataRepository.saveAllBatch(transformedData);
            System.out.println("Batch saved to DB: " + transformedData.size() + " records");
        });
    }
}

// DataRepository.java
package com.example.etl.repository;

import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Repository;
import java.util.List;

@Repository
public class DataRepository {
    private final JdbcTemplate jdbcTemplate;

    public DataRepository(JdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
    }

    public void saveAllBatch(List<String> dataBatch) {
        String sql = "INSERT INTO etl_table (data) VALUES (?)";
        jdbcTemplate.batchUpdate(sql, dataBatch, 1000, (ps, data) -> ps.setString(1, data));
    }
}

// ProgressReportingController.java
package com.example.etl.controller;

import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/progress")
public class ProgressReportingController {
    private int progress = 0;

    @GetMapping
    public String getProgress() {
        return "ETL Progress: " + progress + "%";
    }

    @PostMapping("/update")
    public void updateProgress(@RequestParam int value) {
        progress = value;
    }
}

// ETLController.java
package com.example.etl.controller;

import com.example.etl.service.FileProcessorService;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/etl")
public class ETLController {
    private final FileProcessorService fileProcessorService;

    public ETLController(FileProcessorService fileProcessorService) {
        this.fileProcessorService = fileProcessorService;
    }

    @PostMapping("/start")
    public String startETL(@RequestParam String filePath) {
        fileProcessorService.processFile(filePath);
        return "ETL Started!";
    }
}
